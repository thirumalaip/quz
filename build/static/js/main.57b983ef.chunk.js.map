{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/toolbar/toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/backdrop.js","components/pages/quiz1/quiz1.js","components/pages/quiz1/quiz2.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","toolbar","drawerclickHandler","href","sideDrawer","drawerClasses","show","backdrop","backdropClick","Quiz1","Component","Quiz2","App","state","SideDrawerOpen","drawerToggleClickHandlder","setState","prevState","backdropClickHandler","newbackdrop","this","style","height","marginTop","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4VAWeA,G,YARY,SAAAC,GAAK,OAC5B,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,wBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,2BCkBRG,G,MApBC,SAAAJ,GAAK,OAErB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,sBAEX,6BAAK,kBAAC,EAAD,CAAoBE,MAASH,EAAMK,sBACxC,yBAAKJ,UAAU,gBAAe,uBAAGK,KAAK,KAAR,aAC9B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,4BAEX,4BACI,gCAAK,uBAAGK,KAAK,KAAR,aACL,gCAAK,uBAAGA,KAAK,KAAR,gBCCNC,G,MAfI,SAAAP,GACnB,IAAIQ,EAAgB,cAIhB,OAHDR,EAAMS,OACLD,EAAgB,oBAGZ,yBAAKP,UAAWO,GAChB,4BACI,gCAAK,uBAAGF,KAAK,KAAR,SACL,gCAAK,uBAAGA,KAAK,UAAR,UACL,gCAAK,uBAAGA,KAAK,UAAR,cCLFI,G,MAJE,SAAAV,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMW,kBCK9BC,E,uKALP,OACI,iD,GAJQC,a,eCQLC,E,uKALP,OACI,iD,GAJQD,aCiDLE,E,4MAxCbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,0BAA4B,WAC1B,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAsB,WACpB,EAAKF,SAAS,CAACF,gBAAe,K,uDAG9B,IAAIK,EAMJ,OAJGC,KAAKP,MAAMC,iBACZK,EAAc,kBAAC,EAAD,CAAUX,cAAiBY,KAAKF,wBAI9C,yBAAKG,MAAO,CAACC,OAAO,QAASxB,UAAU,OACtC,kBAAC,EAAD,CAASI,mBAAsBkB,KAAKL,4BACpC,kBAAC,EAAD,CAAYT,KAAQc,KAAKP,MAAMC,iBAC9BK,EACC,0BAAME,MAAO,CAACE,UAAW,SAEzB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IAC9B,kBAAC,IAAD,CAAOe,KAAK,SAASE,UAAWjB,IAChC,kBAAC,IAAD,CAAOe,KAAK,SAASE,UAAWf,W,GA/B1BD,aCEEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57b983ef.chunk.js","sourcesContent":["import React from 'react';\nimport './DrawerToggleButton.css';\n\nconst drawerToggleButton = props => (\n    <button className=\"toggle-button\" onClick={props.click}>\n        <div className=\"toggle-button__line\" />\n        <div className=\"toggle-button__line\" />\n        <div className=\"toggle-button__line\" />\n    </button>\n);\n\nexport default drawerToggleButton;","import React from 'react'\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\n\n\nimport './toolbar.css';\nconst toolbar = props => (\n\n<header className=\"toolbar\">\n    <nav className=\"toolbar_navigation\">\n      \n        <div><DrawerToggleButton click = {props.drawerclickHandler}/></div>\n        <div className=\"toolbar_logo\"><a href=\"/\">The Logo</a></div>\n        <div className=\"spacer\" />\n        <div className=\"toolbar_navigation-items\">\n\n            <ul>\n                <li> <a href=\"/\">Products</a></li>\n                <li> <a href=\"/\">Users</a></li>\n            </ul>\n        </div>\n    </nav>\n</header>\n);\n\n\nexport default toolbar;","import React from 'react'\nimport './SideDrawer.css';\n\nconst sideDrawer = props => {\nlet drawerClasses = 'side-drawer';\nif(props.show) {\n    drawerClasses = 'side-drawer open';\n}\n    return (\n        <nav className={drawerClasses}>      \n        <ul>\n            <li> <a href=\"/\">Home</a></li>\n            <li> <a href=\"/quiz1\">Quiz1</a></li>\n            <li> <a href=\"/quiz2\">Quiz2</a></li>\n        </ul>\n</nav>\n    )\n};\nexport default sideDrawer;","import React from 'react'\n\nimport './backdrop.css';\n\nconst backdrop = props => (\n    <div className=\"backdrop\" onClick={props.backdropClick} />\n)\n\nexport default backdrop;","import React, {Component} from 'react'\n\nclass Quiz1 extends Component { \n\n    render() {\n        return (\n            <p>Quiz1 programe</p>\n        )}\n}\n\nexport default Quiz1;\n\n","import React, {Component} from 'react'\n\nclass Quiz2 extends Component { \n\n    render() {\n        return (\n            <p>Quiz2 programe</p>\n        )}\n}\n\nexport default Quiz2;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Toolbar from './components/toolbar/toolbar'\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/backdrop';\nimport Quiz1 from './components/pages/quiz1/quiz1';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Quiz2 from './components/pages/quiz1/quiz2';\n\nclass App extends Component {\n  state = {\n    SideDrawerOpen: false\n  }\n\n  drawerToggleClickHandlder = () => {\n    this.setState((prevState) => {\n      return {SideDrawerOpen: !prevState.SideDrawerOpen}\n    });\n  }\n\n  backdropClickHandler =() => {\n    this.setState({SideDrawerOpen:false})\n  }\n  render() {\n    let newbackdrop;\n\n    if(this.state.SideDrawerOpen) {\n      newbackdrop = <Backdrop backdropClick = {this.backdropClickHandler}/>\n    }\n\n    return (\n      <div style={{height:'100%'}} className=\"App\">\n       <Toolbar drawerclickHandler = {this.drawerToggleClickHandlder} />\n       <SideDrawer show = {this.state.SideDrawerOpen}/>\n       {newbackdrop}\n         <main style={{marginTop: '64px'}}>\n  \n         <Router>\n         <Route path='/' exact component={Quiz1} />\n            <Route path='/quiz1' component={Quiz1} />\n            <Route path='/quiz2' component={Quiz2} />\n         </Router>\n           </main>\n    \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}